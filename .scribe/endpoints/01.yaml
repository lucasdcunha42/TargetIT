name: 'User Management'
description: |-

  APIs for managing users in the system
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system
      subgroup: ''
      subgroupDescription: ''
      title: 'Create User'
      description: 'Creates a new user in the system.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "User's name."
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "User's email."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "User's password (minimum 8 characters)."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: "User's phone."
        required: true
        example: '11999999999'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cpf:
        name: cpf
        description: "User's CPF."
        required: true
        example: '12345678900'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: password123
      phone: '11999999999'
      cpf: '12345678900'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
             "status": "success",
             "message": "User Created Successfully!",
             "user": {
                 "id": 1,
                 "name": "John Doe",
                 "email": "john@example.com",
                 "phone": "11999999999",
                 "cpf": "12345678900",
                 "created_at": "2024-02-17T10:00:00.000000Z",
                 "updated_at": "2024-02-17T10:00:00.000000Z"
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
             "message": "This action is unauthorized."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
             "message": "The given data was invalid.",
             "errors": {
                 "email": [
                     "The email field is already in use."
                 ]
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system
      subgroup: ''
      subgroupDescription: ''
      title: 'Show User'
      description: 'Returns the data of a specific user.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'User ID.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": "success",
             "message": "Profile Data",
             "user": {
                 "id": 1,
                 "name": "John Doe",
                 "email": "john@example.com",
                 "phone": "11999999999",
                 "cpf": "12345678900",
                 "created_at": "2024-02-17T10:00:00.000000Z",
                 "updated_at": "2024-02-17T10:00:00.000000Z"
             }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
             "status": "error",
             "message": "User not found!"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User'
      description: 'Updates the data of an existing user.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'User ID.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "optional User's name."
        required: false
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "optional User's email."
        required: false
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: "optional User's phone."
        required: false
        example: '11999999999'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cpf:
        name: cpf
        description: "optional User's CPF."
        required: false
        example: '12345678900'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Must be at least 6 characters.'
        required: false
        example: '''RX^E9\q`3'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      phone: '11999999999'
      cpf: '12345678900'
      password: '''RX^E9\q`3'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": "success",
             "data": {
                 "id": 1,
                 "name": "John Doe",
                 "email": "john@example.com",
                 "phone": "11999999999",
                 "cpf": "12345678900",
                 "created_at": "2024-02-17T10:00:00.000000Z",
                 "updated_at": "2024-02-17T10:00:00.000000Z",
                 "address": {
                     "id": 1,
                     "user_id": 1,
                     "street": "Example Street",
                     "number": "123",
                     "complement": "Apt 45",
                     "neighborhood": "Downtown",
                     "city": "SÃ£o Paulo",
                     "state": "SP",
                     "zipcode": "01001000"
                 }
             },
             "message": "User updated successfully!"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
             "message": "This action is unauthorized."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
             "status": "error",
             "message": "User not found!"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users in the system
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove User'
      description: 'Removes a user from the system (soft delete).'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'User ID.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": "success",
             "message": "User deleted successfully!"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
             "message": "This action is unauthorized."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
             "status": "error",
             "message": "User not found!"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
