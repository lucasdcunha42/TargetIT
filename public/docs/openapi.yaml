openapi: 3.0.3
info:
  title: 'API Documentation'
  description: 'Documentação da API do sistema'
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/login:
    post:
      summary: 'Login do usuário'
      operationId: loginDoUsurio
      description: 'Retorna um token JWT para autenticação nas demais rotas'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  token_type: bearer
                  expires_in: 3600
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 3600
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Credenciais inválidas'
                properties:
                  message:
                    type: string
                    example: 'Credenciais inválidas'
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Email do usuário.'
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: 'Senha do usuário.'
                  example: password123
                  nullable: false
              required:
                - email
                - password
      security: []
  '/api/v1/users/{user_id}/addresses':
    post:
      summary: 'Criar endereço'
      operationId: criarEndereo
      description: "Adiciona um novo endereço para um usuário.\nUsuários podem adicionar endereços a suas próprias contas.\nAdministradores podem adicionar endereços a qualquer usuário."
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Endereço criado com sucesso'
                  data:
                    id: 1
                    street: 'Rua das Flores'
                    number: '123'
                    complement: 'Apto 45'
                    neighborhood: Centro
                    city: 'São Paulo'
                    state: SP
                    zip_code: 01234-567
                properties:
                  message:
                    type: string
                    example: 'Endereço criado com sucesso'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      street:
                        type: string
                        example: 'Rua das Flores'
                      number:
                        type: string
                        example: '123'
                      complement:
                        type: string
                        example: 'Apto 45'
                      neighborhood:
                        type: string
                        example: Centro
                      city:
                        type: string
                        example: 'São Paulo'
                      state:
                        type: string
                        example: SP
                      zip_code:
                        type: string
                        example: 01234-567
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Não autorizado. Você só pode adicionar endereços à sua própria conta.'
                properties:
                  message:
                    type: string
                    example: 'Não autorizado. Você só pode adicionar endereços à sua própria conta.'
      tags:
        - Endereços
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                street:
                  type: string
                  description: 'Nome da rua.'
                  example: 'Rua das Flores'
                  nullable: false
                number:
                  type: string
                  description: Número.
                  example: '123'
                  nullable: false
                district:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: eyacoujouapnprrcnzppprnrw
                  nullable: false
                complement:
                  type: string
                  description: Complemento.
                  example: 'Apto 45'
                  nullable: true
                zip_code:
                  type: string
                  description: CEP.
                  example: 01234-567
                  nullable: false
                neighborhood:
                  type: string
                  description: Bairro.
                  example: Centro
                  nullable: false
                city:
                  type: string
                  description: Cidade.
                  example: 'São Paulo'
                  nullable: false
                state:
                  type: string
                  description: Estado.
                  example: SP
                  nullable: false
              required:
                - street
                - number
                - district
                - zip_code
                - neighborhood
                - city
                - state
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 14
        required: true
        schema:
          type: integer
      -
        in: path
        name: user
        description: 'ID do usuário.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/users:
    post:
      summary: 'Criar Usuário'
      operationId: criarUsurio
      description: 'Cria um novo usuário no sistema.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User Created Successfully!'
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                    phone: '11999999999'
                    cpf: '12345678900'
                    created_at: '2024-02-17T10:00:00.000000Z'
                    updated_at: '2024-02-17T10:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User Created Successfully!'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
                      phone:
                        type: string
                        example: '11999999999'
                      cpf:
                        type: string
                        example: '12345678900'
                      created_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'This action is unauthorized.'
                properties:
                  message:
                    type: string
                    example: 'This action is unauthorized.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    email:
                      - 'O campo email já está sendo utilizado.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'O campo email já está sendo utilizado.'
                        items:
                          type: string
      tags:
        - 'Gerenciamento de Usuários'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Nome do usuário.'
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: 'Email do usuário.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'Senha do usuário (mínimo 8 caracteres).'
                  example: password123
                  nullable: false
                phone:
                  type: string
                  description: 'Telefone do usuário.'
                  example: '11999999999'
                  nullable: false
                cpf:
                  type: string
                  description: 'CPF do usuário.'
                  example: '12345678900'
                  nullable: false
              required:
                - name
                - email
                - password
                - phone
                - cpf
      security: []
  '/api/v1/users/{user_id}':
    get:
      summary: 'Exibir Usuário'
      operationId: exibirUsurio
      description: 'Retorna os dados de um usuário específico.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Profile Data'
                  user:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                    phone: '11999999999'
                    cpf: '12345678900'
                    created_at: '2024-02-17T10:00:00.000000Z'
                    updated_at: '2024-02-17T10:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Profile Data'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
                      phone:
                        type: string
                        example: '11999999999'
                      cpf:
                        type: string
                        example: '12345678900'
                      created_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Usuário não encontrado!'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Usuário não encontrado!'
      tags:
        - 'Gerenciamento de Usuários'
      security: []
    put:
      summary: 'Atualizar Usuário'
      operationId: atualizarUsurio
      description: 'Atualiza os dados de um usuário existente.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  data:
                    id: 1
                    name: 'John Doe'
                    email: john@example.com
                    phone: '11999999999'
                    cpf: '12345678900'
                    created_at: '2024-02-17T10:00:00.000000Z'
                    updated_at: '2024-02-17T10:00:00.000000Z'
                    address:
                      id: 1
                      user_id: 1
                      street: 'Rua Exemplo'
                      number: '123'
                      complement: 'Apto 45'
                      neighborhood: Centro
                      city: 'São Paulo'
                      state: SP
                      zipcode: '01001000'
                  message: 'Usuário atualizado com sucesso!'
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        example: john@example.com
                      phone:
                        type: string
                        example: '11999999999'
                      cpf:
                        type: string
                        example: '12345678900'
                      created_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2024-02-17T10:00:00.000000Z'
                      address:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          user_id:
                            type: integer
                            example: 1
                          street:
                            type: string
                            example: 'Rua Exemplo'
                          number:
                            type: string
                            example: '123'
                          complement:
                            type: string
                            example: 'Apto 45'
                          neighborhood:
                            type: string
                            example: Centro
                          city:
                            type: string
                            example: 'São Paulo'
                          state:
                            type: string
                            example: SP
                          zipcode:
                            type: string
                            example: '01001000'
                  message:
                    type: string
                    example: 'Usuário atualizado com sucesso!'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'This action is unauthorized.'
                properties:
                  message:
                    type: string
                    example: 'This action is unauthorized.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Usuário não encontrado!'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Usuário não encontrado!'
      tags:
        - 'Gerenciamento de Usuários'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'optional Nome do usuário.'
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: 'optional Email do usuário.'
                  example: john@example.com
                  nullable: false
                phone:
                  type: string
                  description: 'optional Telefone do usuário.'
                  example: '11999999999'
                  nullable: false
                cpf:
                  type: string
                  description: 'optional CPF do usuário.'
                  example: '12345678900'
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: 'qT|P|v?s^ul'
                  nullable: true
      security: []
    delete:
      summary: 'Remover Usuário'
      operationId: removerUsurio
      description: 'Remove um usuário do sistema (soft delete).'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Usuário deletado com sucesso!'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Usuário deletado com sucesso!'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'This action is unauthorized.'
                properties:
                  message:
                    type: string
                    example: 'This action is unauthorized.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Usuário não encontrado!'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Usuário não encontrado!'
      tags:
        - 'Gerenciamento de Usuários'
      security: []
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 8
        required: true
        schema:
          type: integer
      -
        in: path
        name: user
        description: 'ID do usuário.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Autenticação
    description: "\nAPIs para autenticação de usuários"
  -
    name: Endereços
    description: "\nAPIs para gerenciamento de endereços dos usuários"
  -
    name: 'Gerenciamento de Usuários'
    description: "\nAPIs para gerenciar usuários no sistema"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by caling the endpoint /api/v1/login'
security:
  -
    default: []
